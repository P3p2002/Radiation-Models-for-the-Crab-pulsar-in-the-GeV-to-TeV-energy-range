# -*- coding: utf-8 -*-
"""
Created on Thu May  2 14:34:10 2024

@author: Pep Rubi

popt4, pcov4 = curve_fit(EF, E4, E1F, [K_in, alpha_in, beta_in])
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
import scienceplots
from sklearn.metrics import r2_score

plt.style.use(["science","no-latex"])
plt.rcParams["figure.figsize"] = (7,7)
plt.rcParams['xtick.top'] = False
plt.rcParams['ytick.right'] = False
plt.rc('xtick', labelsize=20) 
plt.rc('ytick', labelsize=20) 
plt.rcParams['xtick.major.size'] = 10
plt.rcParams['ytick.major.size'] = 10
plt.rcParams['xtick.minor.size'] = 5
plt.rcParams['ytick.minor.size'] = 5

def EsquaredF(E, K, alpha, beta):
    E0 = 1
    #F = K*(E)**(-alpha+2-beta*np.log10(E/E0))/(E0**(-alpha-beta*np.log10(E/E0)))
    F = (E0)*K*(E/E0)**(-alpha+1-beta*np.log10(E/E0))
    return F


#Points that range from 2e-4 MeV to 2e-2 MeV
Interval_1_2 = np.array([0.00018529204335398188, 0.00026826936312485507, 0.000404709199115943, 0.0006628706949378706, 0.0011787679216418198, 0.0017782806652028994, 0.0027952995832933696, 0.004970836558590657, 0.008483426131078615, 0.014478204824082668, 0.02682698680657344, 0.049708318805032674, 0.08483450082550081, 0.13894990437515836, 0.22758518925665774])
Data_1_2 = np.array([0.00019306977288832496, 0.000249359061432569, 0.00031050117634809897, 0.00040102813760005114, 0.0005179474679231213, 0.0006218004555057681, 0.0006689545056200522, 0.0008329802002184533, 0.000896150501946605, 0.000896150501946605, 0.0008639889313244301, 0.0008639889313244301, 0.0008030857221391513, 0.0008030857221391513, 0.0007742641144826989])
#Points that range from 1e-7 MeV to 2e-4 MeV
Interval_1_3 = np.array([1.1787695460435082e-7, 1.9306991565211053e-7, 2.9126328996497e-7, 4.3939680501067657e-7, 6.628707506370985e-7, 0.0000010857117945006027, 0.0000017782804560086247, 0.0000027952989960892988, 0.00000404708702618929, 0.000006361673467383023, 0.000010857102618453848, 0.00001637894422619578, 0.000025746246154698523, 0.00004393972185302389, 0.00006906934166047259, 0.00011312823624679939, 0.0002096177914042753])
Data_1_3 = np.array([6.011005284041015e-7, 8.966678019375663e-7, 0.0000012437607565150496, 0.0000017890865809929578, 0.0000026687987387302526, 0.0000041284737078301905, 0.000005726572952667369, 0.000009186661857373139, 0.000012742745392311902, 0.00001767536050137334, 0.00002636651591589646, 0.000035267021797634925, 0.000052608089317734, 0.00007036692442105561, 0.00010496706036384912, 0.00014040040241817682, 0.00020943671528903202])

#The same, but in keV
Interval_1_2 = Interval_1_2*1e3
Data_1_2 = Data_1_2*1e3

Interval_1_3 = Interval_1_3*1e3
Data_1_3 = Data_1_3*1e3

#Parametres inicials
K_in = 1
E0_in = 0.1
alpha_in = 1
beta_in = 0.5
#El primer ajust mes grafica
popt2, pcov2 = curve_fit(EsquaredF, Interval_1_2, Data_1_2, [K_in, alpha_in, beta_in])

E2 = np.logspace(-1, 2, 50)*2.4#en keV
E2F2 = EsquaredF(E2, *popt2)


plt.plot(E2, E2F2, label = "Fitting 2")
plt.plot(Interval_1_2, Data_1_2, '.', label = "Data 2")
plt.ylabel(r"$E^2F (keVcm^{-2}s^{-1})$")
plt.xlabel(r"E (keV)")
plt.xscale("log")
plt.yscale("log")
plt.legend()
plt.show()


#El segon ajust i grafica total
popt5, pcov5 = curve_fit(EsquaredF, Interval_1_3, Data_1_3, [K_in, alpha_in, beta_in])

E5 = np.logspace(-5, -1, 50)*6#en keV
E2F5 = EsquaredF(E5, *popt5)

plt.plot(E2, E2F2, label = "Fit 1")
plt.plot(Interval_1_2, Data_1_2, '.')

plt.plot(E5, E2F5, label = "Fit 2")
plt.plot(Interval_1_3, Data_1_3, '.')
plt.ylabel(r"$E^2F$ (keVcm$^{-2}$s$^{-1})$")
plt.xlabel(r"E (keV)")
plt.xscale("log")
plt.yscale("log")
#Ajust de tot
Data_tot = np.concatenate((Data_1_3, Data_1_2))
Interval_tot = np.concatenate((Interval_1_3, Interval_1_2))

popt6, pcov6 = curve_fit(EsquaredF, Interval_tot, Data_tot, [K_in, alpha_in, beta_in])

E6 = np.logspace(-5, 2, 50)*6#en keV
E2F6 = EsquaredF(E6, *popt6)

plt.plot(E6, E2F6,'--',label = "Combined fit",color = "r", alpha = 0.5 )
plt.plot(Interval_tot, Data_tot, '.', label = "Data")
plt.ylabel(r"$E^2F (keVcm^{-2}s^{-1})$", fontsize = 20)
plt.xlabel(r"E (keV)", fontsize = 20)
plt.xscale("log")
plt.yscale("log")
plt.legend(fontsize = 15)
plt.savefig("Fit_spectra")

"""
#Points that range from 6e-6 MeV to 2e-4 MeV , aquest no el necessitaria realment
Interval_1_1 = np.array([0.00000662869447274412, 0.000010419739772213044, 0.000015719113624701248, 0.000022758433253012088, 0.00003577430715727315, 0.00005396875654704591, 0.00008839509266263147, 0.00014478177573025634, 0.0002275845467114532])
Data_1_1 = np.array([0.000017946014394603426, 0.000026826957952797274, 0.00003464832923416694, 0.00004814369735843197, 0.00006938571748329142, 0.0000896150501946605, 0.00012005087272635577, 0.0001668101467488343, 0.00023178194732322737])

#The same, but in keV
Interval_1_1 = Interval_1_1*1e3
Data_1_1 = Data_1_1*1e3
max1 = np.max(Interval_1_1)
min1 = np.min(Interval_1_1)

popt1, pcov1 = curve_fit(EsquaredF, Interval_1_1, Data_1_1, [K_in, alpha_in, beta_in])

E1 = np.logspace(-3, -1, 50)*2.4#en keV
E2F1 = EsquaredF(E1, *popt1)



plt.plot(E1, E2F1, label = "Fitting")
plt.plot(Interval_1_1, Data_1_1, '.', label = "Data")
plt.ylabel(r"$E^2F (MeVcm^{-2}s^{-1})$")
plt.xlabel(r"E (MeV)")
#plt.xscale("log")
#plt.yscale("log")
plt.legend()


def F(E, K, alpha, beta):
    
    E0 = 1
    #F = K*(E)**(-alpha+2-beta*np.log10(E/E0))/(E0**(-alpha-beta*np.log10(E/E0)))
    F = (E0)*K*(E/E0)**(-alpha-1-beta*np.log10(E/E0))
    return F

F1 = F(E1, *popt1)
F2 = F(E2, popt2[0], popt2[1], popt2[2])
plt.plot(E1, F1, label = "Fiting of the first interval")
plt.plot(E2, F2, label ="Fitting of the second interval")
plt.xscale("log")
plt.xlabel("E(keV)")
plt.ylabel(r"$F(keV^{-1}cm^{-2}s^{-1})$")
plt.legend()
plt.show()



def EF(E, K, alpha, beta):
    E0 = 1
    #F = K*(E)**(-alpha+1-beta*np.log10(E/E0))/(E0**(-alpha-beta*np.log10(E/E0)))
    F = K*(E/E0)**(-alpha-beta*np.log10(E/E0))
    return F

#Points from the second article to make the comparison and to see if its plausible what we are doing

#First interval
Interval_2_1 = np.array([2.0685345276300082, 2.235618208685777, 2.443160092122436, 2.699761604274995, 2.9178319825017107, 3.188706652804254, 3.4462710483901393, 3.745363788564815, 4.025495817123277, 4.350650969341198, 4.780993272927807, 5.224831750343336, 5.64686342388786, 6.171084045243601, 6.8192239288049805, 7.288709017464086, 7.96535066916879, 8.656642365220018, 9.304110254368233, 9.94467303295874, 10.747943442540212, 11.487910223614719])
Data_2_1 = np.array([0.2623302144941956, 0.2530122248320616, 0.24110108996096463, 0.22975057248663108, 0.2242774223956716, 0.21631107087431775, 0.2036576146683562, 0.191744342278734, 0.18493356829842506, 0.17202918501579512, 0.16393051379210974, 0.15621310622193366, 0.14707517495291914, 0.13681249281027164, 0.1288094309271883, 0.12127458765828703, 0.11418043996798323, 0.1062131024300598, 0.1012128753107504, 0.09529226902810597, 0.08971799791918791, 0.08549431594378312])

#second interval
Interval_2_2 = np.array([2.0685345276300082, 2.235618208685777, 2.443160092122436, 2.699761604274995, 2.9178319825017107, 3.188706652804254, 3.4462710483901393, 3.745363788564815, 4.025495817123277, 4.350650969341198, 4.780993272927807, 5.224831750343336, 5.64686342388786, 6.171084045243601, 6.8192239288049805, 7.288709017464086, 7.96535066916879, 8.656642365220018, 9.304110254368233, 9.94467303295874, 10.747943442540212, 11.487910223614719, 8.234983443243452, 8.850913629823577, 9.726394526695618, 10.570522556720496, 11.361137859772752, 12.278821712392705, 13.124185313948798, 14.184277453491205, 15.160826519388305, 16.294770597254946, 17.513527278846343, 19.139372285706372, 20.570889085249377, 22.109475245102818, 23.631652703128083, 25.25862795431823, 27.60347907915508, 29.833135959525293, 32.96646636392658, 29.833135959525293, 32.42227484525114, 35.43215359947932, 38.72147011322153, 42.55157272191718, 45.734189700630296, 49.154848429277976, 52.83132624766566, 55.84547258024097, 60.35633135700804, 63.44677905369863, 68.19223928804982, 73.29263310881288, 79.21276775994725, 85.61109500426538, 92.01432071597822, 98.89647149590905, 108.07739386623642, 118.11067494830016, 129.07538790219724, 138.72942642913867, 149.1056029076429, 161.1494497311195])
Data_2_2 = np.array([0.2623302144941956, 0.2530122248320616, 0.24110108996096463, 0.22975057248663108, 0.2242774223956716, 0.21631107087431775, 0.2036576146683562, 0.191744342278734, 0.18493356829842506, 0.17202918501579512, 0.16393051379210974, 0.15621310622193366, 0.14707517495291914, 0.13681249281027164, 0.1288094309271883, 0.12127458765828703, 0.11418043996798323, 0.1062131024300598, 0.1012128753107504, 0.09529226902810597, 0.08971799791918791, 0.08549431594378312, 0.07952865253515556, 0.0748764989588025, 0.07049651932441116, 0.06479153878865719, 0.06249013828170252, 0.05812967142221728, 0.05407347131194225, 0.050910386680575244, 0.0479323035631119, 0.045675779662729045, 0.04197943498602069, 0.040003156123357676, 0.036765892795904295, 0.03545996541864085, 0.03259034271314363, 0.031056077055390558, 0.02959404049719868, 0.026873198522075297, 0.024998027578531576, 0.03143273120021895, 0.028889031206088895, 0.026233006972641734, 0.02469847961243174, 0.02242772986274499, 0.021115784540342752, 0.019880594493572747, 0.018717647859560364, 0.01720291850157952, 0.016196606734943508, 0.015434114063286706, 0.014185097499611237, 0.013195282958526556, 0.012274536171524603, 0.011418037695713774, 0.010621304381601533, 0.01, 0.009190742948669456, 0.008345761240263781, 0.007763406707116552, 0.007221687988068699, 0.00663726779538333, 0.006100145585270116])

popt3, pcov3 = curve_fit(EF, Interval_2_1, Data_2_1, [K_in, alpha_in, beta_in])

E3 = np.logspace(0, 1, 50)
EF1 = EF(E3, *popt3)

EF1fit = EF(Interval_2_1, *popt3)

plt.plot(E3, EF1, label = "Fitting")
plt.plot(Interval_2_2, Data_2_2, '.', label = "Data")
plt.ylabel(r"$EF (cm^{-2}s^{-1})$")
plt.xlabel(r"E (MeV)")
#plt.xscale("log")
#plt.yscale("log")
plt.legend()
#plt.show()
popt4, pcov4 = curve_fit(EF, Interval_2_2, Data_2_2, [K_in, alpha_in, beta_in])

E4 = np.logspace(0, 2, 50)*1.5
EF2 = EF(E4, *popt4)

EF4fit = EF(Interval_2_2, *popt4)


plt.plot(E4, EF2, label = "Fitting 2")
plt.plot(Interval_2_2, Data_2_2, '.', label = "Data 2")
plt.ylabel(r"$EF (cm^{-2}s^{-1})$")
plt.xlabel(r"E (MeV)")
plt.xscale("log")
plt.yscale("log")
plt.legend()
plt.show()

x = np.array([0.10136371835335042, 0.23794185078155453, 0.5363046180289565, 1.4811144702519798, 3.7711213892310105, 9.601794336595852, 18.395259970773782, 36.70332803124921, 97.32735768214937, 247.80977642342708, 657.1248995884412, 1606.5054765218247, 4436.692185423351, 8499.880678562657, 11296.429232129154])
y = np.array([0.0009284140353699545, 0.000894567086194458, 0.0006897789918747262, 0.00045844834149148795, 0.00034061042289957976, 0.00023494591412969628, 0.00017455625842138664, 0.00015045948026131824, 0.00016206075579346804, 0.0001561522834730267, 0.0001561522834730267, 0.00011601565742168083, 0.00007710757555468393, 0.00003534984012947441, 0.000023494591412969625])
plt.plot(x,y)
plt.xscale('log')
plt.yscale('log')
plt.show()
"""